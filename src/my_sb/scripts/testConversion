#!/usr/bin/env python

"""
A script for testing octomap_server
"""

from __future__ import division
from sensor_msgs.msg import PointCloud2
import sensor_msgs.point_cloud2 as pc2
from std_msgs.msg import Header
from geometry_msgs.msg import PoseWithCovarianceStamped
import rospy
import time
import math

import tf
import tf2_ros
import geometry_msgs.msg


class testConversion(object):
    def __init__(self):

        self.pubPoint2 = rospy.Publisher('cloud_in', PointCloud2, queue_size=10)
        self.pubPose = rospy.Publisher('initialpose', PoseWithCovarianceStamped, queue_size=10)

        self._r = rospy.Rate(10.)
        self.mainloop()

    def mainloop(self):
        x = 0
        dx = 0
        A = 5
        
        ## TODO: fixme
        br = tf2_ros.TransformBroadcaster()
        t = geometry_msgs.msg.TransformStamped()
        
        
        tStart = time.time()
        h = Header()
        pose = PoseWithCovarianceStamped()
        while not rospy.is_shutdown():
            h.stamp = rospy.Time.now()
            h.frame_id = 'my_frame'
            
            x = A*math.sin((time.time()-tStart))
            dx += 10
            dx = dx%100
            y = A*math.cos((time.time()-tStart))
            
            IN = []
            p1 = [x, y, 1]
            p2 = [x, 0, y]
            p3 = [0, x, y]
            p4 = [x, y, 1]
            p5 = [x*0.6, A/2, 1]
#            IN.append(p1)
            IN.append(p2)
            IN.append(p3)
            IN.append(p4)
            IN.append(p5)
            
            
            t.header.stamp = rospy.Time.now()
            t.header.frame_id = "my_frame"
            t.child_frame_id = "map"
            t.transform.translation.x = dx
            t.transform.translation.y = 7
            t.transform.translation.z = 0.0
            q = tf.transformations.quaternion_from_euler(0, 0, 0)
            t.transform.rotation.x = q[0]
            t.transform.rotation.y = q[1]
            t.transform.rotation.z = q[2]
            t.transform.rotation.w = q[3]
            br.sendTransform(t)
            

            point2OUT = pc2.create_cloud_xyz32(h, IN)
            
#            for p in pc2.read_points(point2OUT, field_names = ("x", "y", "z"), skip_nans=True):
#                 print " x : %f  y: %f  z: %f" %(p[0],p[1],p[2])

#            print(">>>>>>>>>>>>>>")
#            print h
#            print(point2OUT.fields)
            self.pubPoint2.publish(point2OUT)
            self._r.sleep()

if __name__ == '__main__':
    time.sleep(1)  # allow the system to come online

    rospy.init_node("testConversion", anonymous=False)

    try:
        testConversion()
    except rospy.ROSInterruptException:
        pass
